// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  title                 String
  year                  Int
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]

  @@map("academic_departments")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String
  profileImage         String
  firstName            String
  middleName           String?
  lastName             String
  email                String
  contactNO            String
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicSemesterId   String
  academicDepartmentId String
  academicFacultyId    String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("students")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String
  profileImage         String
  firstName            String
  middleName           String?
  lastName             String
  email                String
  contactNO            String
  gender               String
  bloodGroup           String
  designation          String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicDepartmentId String
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  courses              CourseFaculty[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  prerequisite    CourseToPrerequisite[] @relation("course")
  prerequisiteFor CourseToPrerequisite[] @relation("prerequisite")
  faculties       CourseFaculty[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  prerequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "course")
  prerequisite   Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisite")

  @@id([courseId, prerequisiteId])
  @@map("course_to_prerequisities")
}

model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                 String                     @id @default(uuid())
  startDate          String
  endDate            String
  status             SemesterRegistrationStatus @default(UPCOMING)
  minCredit          Int                        @default(0)
  maxCredit          Int                        @default(0)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  academicSemesterId String
  academicSemester   AcademicSemester           @relation(fields: [academicSemesterId], references: [id])

  @@map("semester_registration")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
