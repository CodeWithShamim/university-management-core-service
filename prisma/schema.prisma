// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  title                 String
  year                  Int
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String
  profileImage         String
  firstName            String
  middleName           String?
  lastName             String
  email                String
  contactNO            String
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicSemesterId   String
  academicDepartmentId String
  academicFacultyId    String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("students")
}

model Faculty {
  id                          String                       @id @default(uuid())
  facultyId                   String
  profileImage                String
  firstName                   String
  middleName                  String?
  lastName                    String
  email                       String
  contactNO                   String
  gender                      String
  bloodGroup                  String
  designation                 String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicDepartmentId        String
  academicFacultyId           String
  academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  prerequisite    CourseToPrerequisite[] @relation("course")
  prerequisiteFor CourseToPrerequisite[] @relation("prerequisite")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  prerequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "course")
  prerequisite   Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisite")

  @@id([courseId, prerequisiteId])
  @@map("course_to_prerequisities")
}

model CourseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                          String                       @id @default(uuid())
  startDate                   String
  endDate                     String
  status                      SemesterRegistrationStatus   @default(UPCOMING)
  minCredit                   Int                          @default(0)
  maxCredit                   Int                          @default(0)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  academicSemesterId          String
  academicSemester            AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  offeredCourses              OfferedCourse[]
  offeredCourseSections       OfferedCourseSection[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("semester_registration")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId               String
  course                 Course                 @relation(fields: [courseId], references: [id])
  academicDepartmentId   String
  academicDepartment     AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String   @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  offeredCourseId             String
  offeredCourse               OfferedCourse                @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId      String
  semesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  dayOfWeek WeekDays @default(SATURDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
